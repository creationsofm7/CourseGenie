// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  DarkMode      Boolean   @default(false)
  sessions      Session[]
  accounts      Account[]
  creations     Course[]

  Address String?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Course {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  modules     Module[]
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@map("course")
}

model Module {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@map("module")
}

model Lesson {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  searchterm  String?
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contenturl  String?
  recommendations String[]
  quiz        String[]

  @@map("lesson")
}
